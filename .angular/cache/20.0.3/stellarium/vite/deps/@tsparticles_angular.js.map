{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tsparticles/angular/fesm2022/tsparticles-angular.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Subject, mergeMap, takeUntil, from } from 'rxjs';\nimport { tsParticles } from '@tsparticles/engine';\nclass NgParticlesService {\n  initialized = new BehaviorSubject(false);\n  getInstallationStatus() {\n    return this.initialized.asObservable();\n  }\n  async init(particlesInit) {\n    await particlesInit(tsParticles);\n    this.initialized.next(true);\n  }\n  static ɵfac = function NgParticlesService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgParticlesService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgParticlesService,\n    factory: NgParticlesService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgParticlesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxParticlesComponent {\n  platformId;\n  particlesService;\n  options;\n  url;\n  id;\n  particlesInit;\n  particlesLoaded = new EventEmitter();\n  subscription;\n  destroy$ = new Subject();\n  container;\n  constructor(platformId, particlesService) {\n    this.platformId = platformId;\n    this.particlesService = particlesService;\n    this.id = 'tsparticles';\n  }\n  ngOnInit() {\n    this.subscription = this.particlesService.getInstallationStatus().subscribe(() => {\n      this.container?.destroy();\n      this.loadParticles();\n    });\n  }\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    this.loadParticles();\n  }\n  ngOnDestroy() {\n    this.container?.destroy();\n    this.subscription?.unsubscribe();\n    this.destroy$.next();\n  }\n  loadParticles() {\n    const cb = container => {\n      this.container = container;\n      this.particlesLoaded.emit(container);\n    };\n    from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve()).pipe(mergeMap(() => {\n      return tsParticles.load({\n        id: this.id,\n        url: this.url,\n        options: this.options\n      });\n    }), takeUntil(this.destroy$)).subscribe(cb);\n  }\n  static ɵfac = function NgxParticlesComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgxParticlesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(NgParticlesService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxParticlesComponent,\n    selectors: [[\"ngx-particles\"]],\n    inputs: {\n      options: \"options\",\n      url: \"url\",\n      id: \"id\",\n      particlesInit: \"particlesInit\"\n    },\n    outputs: {\n      particlesLoaded: \"particlesLoaded\"\n    },\n    standalone: false,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function NgxParticlesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.id);\n      }\n    },\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxParticlesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-particles',\n      template: '<div [id]=\"id\"></div>'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgParticlesService\n  }], {\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    particlesInit: [{\n      type: Input\n    }],\n    particlesLoaded: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxParticlesModule {\n  static ɵfac = function NgxParticlesModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgxParticlesModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxParticlesModule,\n    declarations: [NgxParticlesComponent],\n    exports: [NgxParticlesComponent]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [NgParticlesService]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxParticlesModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxParticlesComponent],\n      exports: [NgxParticlesComponent],\n      providers: [NgParticlesService]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgParticlesService, NgxParticlesComponent, NgxParticlesModule };\n"],
  "mappings": "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",
  "names": []
}
